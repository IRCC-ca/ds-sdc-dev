@use "../../util/color" as color;
@use "../text" as text;
@use "../../util/theme" as theme;
@use "../template-const" as template-const;
@use "./button-const" as button-const;
@use "../../util/device" as device;
@use "../sizes" as sizes;

$link: "link";
$default-color: null;

@mixin tokens($palette) {
  @include theme.select-attribute($palette, color, $default-color) {
    @include theme.light {
      --link-btn-text: #{color.mix-token($palette, 700)};
      --link-btn-text-disabled: #{color.mix-token($palette, 300)};
    }
    @include theme.dark {
      --link-btn-text: #{color.mix-token($palette, 400)};
      --link-btn-text-disabled: #{color.mix-token($palette, 900)};
    }
    --text: var(--link-btn-text);
  }
}

@mixin layout() {
  @include button-const.layout();

  background-color: transparent;
  text-decoration: underline;
  color: var(--text);
  @include device.if-hover {
    background: var(--generic-hover);
  }

  &:active {
    background: var(--generic-active);
  }

  &:disabled {
    --text: var(--link-btn-text-disabled);
    color: var(--text);
    background: var(--surface1);
  }
}

/// create the layout and tokens for a plain button
/// @param {List} $palette: a list of palettes desired, reflective of the role
@mixin create(
  $palette: (
    cta,
    critical,
  )
) {
  @include button-const.selectors() {
    &:where([category="#{$link}"]) {
      @each $key in $palette {
        @if not $default-color {
          $default-color: $key !global;
        }
        @include tokens($key);
      }
      @include layout();
    }
  }
}