@use "../../util/color" as color;
@use "../text" as text;
@use "../../util/theme" as theme;
@use "../template-const" as template-const;
@use "./button-const" as button-const;
@use "./button-tokens" as b-tokens;
@use "../../util/device" as device;
@use "../sizes" as sizes;

$plain: "plain";
$default-color: null;

@mixin light-colors() {
  @include button-const.selector() {
    &:where([category="#{$plain}"]) {
      &:where([color="critical"]) {
        @include b-tokens.light-colors(critical, neutral);
        @include layout();
      }
      &:not([color]) {
        @include layout();
      }
    }
  }
}

@mixin dark-colors() {
  @include button-const.selector() {
    &:where([category="#{$plain}"]) {
      &:where([color="critical"]) {
        @include b-tokens.dark-colors(critical, neutral);
        @include layout();
      }
      &:not([color]) {
        @include layout();
      }
    }
  }
}

@mixin create() {
  html {
    @include light-colors();
  }

  html[scheme="dark"] {
    @include dark-colors();
  }

  html[scheme="system"] {
    @media (prefers-color-scheme: light) {
      @include light-colors();
    }
    @media (prefers-color-scheme: dark) {
      @include dark-colors();
    }
  }
}

@mixin layout() {
  @include button-const.layout();
  --text: var(--plain-text);
  background-color: transparent;
  color: var(--text);
  @include device.if-hover {
    background: var(--generic-hover);
  }

  &:active {
    background: var(--generic-active);
  }

  &:disabled {
    --text: var(--plain-text-disabled);
    color: var(--text);
    background: var(--surface1);
  }
}
