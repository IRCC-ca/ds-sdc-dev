@use '../../util/color' as color;
@use '../../util/theme' as theme;
@use '../../util/device' as device;
@use '../../util/size' as size;
@use '../../tokens/template-const' as template-const;
@use '../../tokens/sizes' as token-size;
@use '../../typography/typography' as typography;
@use '../../tokens/text' as text;
@use 'sass:map';

@mixin selector {
    lib-progress-indicator#{template-const.$escape} {
        @content;
    }
}

@mixin create {
    @include selector() {
        @include layout();
    }
}

// @mixin types($category: generic) {
//     .#{$category}{
//         background-color: var(--#{$category}-alert-background);
//         .tag-left {
//             --text: var(--#{$category}-alert-text);
//         }
//     }
// }

@mixin large-styles() {
    .stepNumber {
        @include typography.fontSize(map.get(text.$body, level), 3);
    }
    .stepTitle {
        @include typography.fontSize(map.get(text.$heading, level), 5);
        margin-bottom: 8px;
    }
}

@mixin small-styles() {
    .stepNumber {
        @include typography.fontSize(map.get(text.$body, level), 4);
    }
    .stepTitle {
        @include typography.fontSize(map.get(text.$heading, level), 6);
        margin-bottom: 4px;
    }
}

@mixin layout {
    .container {
        // background-color: red;
        display: flex;
        flex-direction: column;
        width: 100%;
    }
    .stepNumber {
        color: var(--text-secondary);
        margin-bottom: 4px;
    }

    @include size.selector(large) {
        @include large-styles();
        .small {
            @include small-styles();
        }
    }

    @include size.selector(small) {
        @include small-styles();
        .large {
            @include large-styles();
        }
    }

    // @include types(neutral);
    // @include types(success);
    // @include types(critical);
}
