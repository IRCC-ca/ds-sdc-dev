import { Component, Input, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "../jl-chip-item/jl-chip-item.component";
import * as i4 from "../../jl-input/jl-input.component";
export class JlChipListComponent {
    constructor() {
        this.chipListChange = new EventEmitter();
    }
    ngOnInit() { }
    removeChipItem(chipIdx) {
        this.chipList?.splice(chipIdx, 1);
        this.chipListChange.emit(this.chipList);
    }
    onSubmit() {
        if (this.chipContentText) {
            this.chipList?.push(this.chipContentText);
            this.chipListChange.emit(this.chipList);
            this.chipContentText = '';
        }
    }
}
JlChipListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: JlChipListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
JlChipListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.3", type: JlChipListComponent, selector: "jl-pr-sclp-jl-chip-list", inputs: { chipList: "chipList" }, outputs: { chipListChange: "chipListChange" }, ngImport: i0, template: "<form #form=\"ngForm\" (ngSubmit)=\"onSubmit()\">\n  <jl-pr-sclp-input name=\"chipContentText\" [(ngModel)]=\"chipContentText\" placeholder=\"Add Chip\">\n  </jl-pr-sclp-input>\n</form>\n<div class=\"chip-list\">\n  <jl-pr-sclp-jl-chip-item *ngFor=\"let chip of chipList; let idx = index\" [chipContent]=\"chip\"\n    (iconClickEvent)=\"removeChipItem(idx)\"></jl-pr-sclp-jl-chip-item>\n</div>", styles: [".chip-list{display:flex;gap:8px;margin:8px 0;overflow-x:auto}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: i3.JlChipItemComponent, selector: "jl-pr-sclp-jl-chip-item", inputs: ["chipContent"], outputs: ["iconClickEvent"] }, { kind: "component", type: i4.JLInputComponent, selector: "jl-pr-sclp-input", inputs: ["config", "id", "formGroup"] }], preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: JlChipListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'jl-pr-sclp-jl-chip-list', template: "<form #form=\"ngForm\" (ngSubmit)=\"onSubmit()\">\n  <jl-pr-sclp-input name=\"chipContentText\" [(ngModel)]=\"chipContentText\" placeholder=\"Add Chip\">\n  </jl-pr-sclp-input>\n</form>\n<div class=\"chip-list\">\n  <jl-pr-sclp-jl-chip-item *ngFor=\"let chip of chipList; let idx = index\" [chipContent]=\"chip\"\n    (iconClickEvent)=\"removeChipItem(idx)\"></jl-pr-sclp-jl-chip-item>\n</div>", styles: [".chip-list{display:flex;gap:8px;margin:8px 0;overflow-x:auto}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { chipList: [{
                type: Input
            }], chipListChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamwtY2hpcC1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2NvbXBvbmVudC1saWIvc3JjL2xpYi9qbC1jaGlwcy9qbC1jaGlwLWxpc3QvamwtY2hpcC1saXN0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL2NvbXBvbmVudC1saWIvc3JjL2xpYi9qbC1jaGlwcy9qbC1jaGlwLWxpc3QvamwtY2hpcC1saXN0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7OztBQU8vRSxNQUFNLE9BQU8sbUJBQW1CO0lBSTlCO1FBRlUsbUJBQWMsR0FBRyxJQUFJLFlBQVksRUFBaUIsQ0FBQztJQUU5QyxDQUFDO0lBRWhCLFFBQVEsS0FBVSxDQUFDO0lBRW5CLGNBQWMsQ0FBQyxPQUFlO1FBQzVCLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQzFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN4QyxJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztTQUMzQjtJQUNILENBQUM7O2dIQW5CVSxtQkFBbUI7b0dBQW5CLG1CQUFtQixnSkNQaEMsMllBT007MkZEQU8sbUJBQW1CO2tCQUwvQixTQUFTOytCQUNFLHlCQUF5QjswRUFLMUIsUUFBUTtzQkFBaEIsS0FBSztnQkFDSSxjQUFjO3NCQUF2QixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdqbC1wci1zY2xwLWpsLWNoaXAtbGlzdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9qbC1jaGlwLWxpc3QuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9qbC1jaGlwLWxpc3QuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBKbENoaXBMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgY2hpcExpc3Q/OiBzdHJpbmdbXTtcbiAgQE91dHB1dCgpIGNoaXBMaXN0Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxBcnJheTxzdHJpbmc+PigpO1xuICBjaGlwQ29udGVudFRleHQ/OiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHt9XG5cbiAgcmVtb3ZlQ2hpcEl0ZW0oY2hpcElkeDogbnVtYmVyKSB7XG4gICAgdGhpcy5jaGlwTGlzdD8uc3BsaWNlKGNoaXBJZHgsIDEpO1xuICAgIHRoaXMuY2hpcExpc3RDaGFuZ2UuZW1pdCh0aGlzLmNoaXBMaXN0KTtcbiAgfVxuXG4gIG9uU3VibWl0KCkge1xuICAgIGlmICh0aGlzLmNoaXBDb250ZW50VGV4dCkge1xuICAgICAgdGhpcy5jaGlwTGlzdD8ucHVzaCh0aGlzLmNoaXBDb250ZW50VGV4dCk7XG4gICAgICB0aGlzLmNoaXBMaXN0Q2hhbmdlLmVtaXQodGhpcy5jaGlwTGlzdCk7XG4gICAgICB0aGlzLmNoaXBDb250ZW50VGV4dCA9ICcnO1xuICAgIH1cbiAgfVxufVxuIiwiPGZvcm0gI2Zvcm09XCJuZ0Zvcm1cIiAobmdTdWJtaXQpPVwib25TdWJtaXQoKVwiPlxuICA8amwtcHItc2NscC1pbnB1dCBuYW1lPVwiY2hpcENvbnRlbnRUZXh0XCIgWyhuZ01vZGVsKV09XCJjaGlwQ29udGVudFRleHRcIiBwbGFjZWhvbGRlcj1cIkFkZCBDaGlwXCI+XG4gIDwvamwtcHItc2NscC1pbnB1dD5cbjwvZm9ybT5cbjxkaXYgY2xhc3M9XCJjaGlwLWxpc3RcIj5cbiAgPGpsLXByLXNjbHAtamwtY2hpcC1pdGVtICpuZ0Zvcj1cImxldCBjaGlwIG9mIGNoaXBMaXN0OyBsZXQgaWR4ID0gaW5kZXhcIiBbY2hpcENvbnRlbnRdPVwiY2hpcFwiXG4gICAgKGljb25DbGlja0V2ZW50KT1cInJlbW92ZUNoaXBJdGVtKGlkeClcIj48L2psLXByLXNjbHAtamwtY2hpcC1pdGVtPlxuPC9kaXY+Il19