import { Component, forwardRef, Input } from '@angular/core';
import { FormControl, FormGroup, NG_VALUE_ACCESSOR } from '@angular/forms';
import { DSSizes } from '../../shared/constants/jl-components/jl-components.constants/jl-components.constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "@ngx-translate/core";
export class RadioInputComponent {
    constructor() {
        this.formGroupEmpty = new FormGroup({});
        this.size = DSSizes.large;
        this.sizes = DSSizes;
        this.touched = false;
        this.config = {
            id: '',
            formGroup: this.formGroupEmpty
        };
        this.id = '';
        this.formGroup = this.formGroupEmpty;
        this.onChange = (formValue) => { };
        this.onTouched = () => { };
    }
    writeValue(formValue) {
        // this.form.get('formControl')?.setValue(formValue);
    }
    registerOnChange(onChange) {
        this.onChange = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouched = onTouched;
    }
    markAsTouched() {
        if (!this.touched) {
            this.onTouched();
            this.touched = true;
        }
    }
    ngOnInit() {
        if (this.config?.small)
            this.size = DSSizes.small;
        if (this.id !== '')
            this.config.id = this.id;
        if (this.formGroup !== this.formGroupEmpty)
            this.config.formGroup = this.formGroup;
        this.config.formGroup.addControl(this.config.id, new FormControl('', this.config.validators));
    }
    /**
     *
     * @param override
     * @returns
     */
    getSize(override) {
        if (override) {
            return override;
        }
        if (this.config?.small) {
            return DSSizes.small;
        }
        return DSSizes.large;
    }
    /**
     * used to disable individual fields (from the config under 'options')
     * @param index of the option field to be disabled
     * @returns null if value is undefined, empty string otherwise. This works with [attr.disabled].
     */
    getDisabled(index) {
        if (this.config.options) {
            if (this.config.options[index].disabled === undefined) {
                return null;
            }
        }
        return '';
    }
}
RadioInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: RadioInputComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
RadioInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.3", type: RadioInputComponent, selector: "lib-radio-input", inputs: { config: "config", id: "id", formGroup: "formGroup" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef(() => RadioInputComponent) //This allows the error state to be turned off and on again
        }
    ], ngImport: i0, template: "<form [formGroup]=\"config.formGroup\">\n    <label *ngIf=\"config.label\"\n       [attr.aria-label]=\"\n          config.formGroup.get(config.id)?.invalid && config.formGroup.get(config.id)?.dirty\n          ? (config.label || '' | translate) + ' ' +\n            (config.helpText || '' | translate) + ' ' + ('INPUT.ERROR' | translate) + ' ' +\n            (config.customErrorText || '' | translate)\n          : (config.label || '' | translate) + ' ' + (config?.helpText || '' | translate)\n       \"\n       [for]=\"config.id\">{{(config.label || '') | translate}}</label>\n    <div *ngFor=\"let option of config.options; let index = index\" class=\"radio\">\n        <ng-container [ngSwitch]=\"getSize(option.sizeOverride)\">\n            <ng-container *ngSwitchCase=\"sizes.small\">\n                <ng-container *ngIf=\"config.error || option.error\">\n                    <input type=\"radio\" value=\"{{option.value || option.text}}\"\n                         [id]=\"config.id + index\" size=\"small\" class=\"ng-invalid\"\n                         [formControlName]=\"config.id ?? 'formControl'\"\n                         [attr.disabled]='getDisabled(index)'>\n                </ng-container>\n                <ng-container *ngIf=\"!config.error && !option.error\">\n                    <input type=\"radio\" value=\"{{option.value || option.text}}\"\n                        [id]=\"config.id + index\" size=\"small\"\n                        [formControlName]=\"config.id ?? 'formControl'\"\n                        [attr.disabled]='getDisabled(index)'>\n                </ng-container>\n            </ng-container>\n\n            <!-- TODO: See if we can remove the error state from here, since it is controlled by the formControl -->\n            <ng-container *ngSwitchDefault>\n                <ng-container *ngIf=\"config.error || option.error\">\n                    <input type=\"radio\" value=\"{{option.value || option.text}}\"\n                        [id]=\"config.id + index\" size=\"large\" class=\"ng-invalid\"\n                        [formControlName]=\"config.id ?? 'formControl'\"\n                        [attr.disabled]='getDisabled(index)'>\n                </ng-container>\n                <ng-container *ngIf=\"!config.error && !option.error\">\n                    <input type=\"radio\" value=\"{{option.value || option.text}}\"\n                        [id]=\"config.id + index\" size=\"large\"\n                        [formControlName]=\"config.id ?? 'formControl'\"\n                        [attr.disabled]='getDisabled(index)'>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n\n        <label for=\"{{config.id}}\">{{option.text | translate}}</label>\n    </div>\n</form>\n", dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i1.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.RadioControlValueAccessor, selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "pipe", type: i3.TranslatePipe, name: "translate" }], preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: RadioInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-radio-input', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef(() => RadioInputComponent) //This allows the error state to be turned off and on again
                        }
                    ], template: "<form [formGroup]=\"config.formGroup\">\n    <label *ngIf=\"config.label\"\n       [attr.aria-label]=\"\n          config.formGroup.get(config.id)?.invalid && config.formGroup.get(config.id)?.dirty\n          ? (config.label || '' | translate) + ' ' +\n            (config.helpText || '' | translate) + ' ' + ('INPUT.ERROR' | translate) + ' ' +\n            (config.customErrorText || '' | translate)\n          : (config.label || '' | translate) + ' ' + (config?.helpText || '' | translate)\n       \"\n       [for]=\"config.id\">{{(config.label || '') | translate}}</label>\n    <div *ngFor=\"let option of config.options; let index = index\" class=\"radio\">\n        <ng-container [ngSwitch]=\"getSize(option.sizeOverride)\">\n            <ng-container *ngSwitchCase=\"sizes.small\">\n                <ng-container *ngIf=\"config.error || option.error\">\n                    <input type=\"radio\" value=\"{{option.value || option.text}}\"\n                         [id]=\"config.id + index\" size=\"small\" class=\"ng-invalid\"\n                         [formControlName]=\"config.id ?? 'formControl'\"\n                         [attr.disabled]='getDisabled(index)'>\n                </ng-container>\n                <ng-container *ngIf=\"!config.error && !option.error\">\n                    <input type=\"radio\" value=\"{{option.value || option.text}}\"\n                        [id]=\"config.id + index\" size=\"small\"\n                        [formControlName]=\"config.id ?? 'formControl'\"\n                        [attr.disabled]='getDisabled(index)'>\n                </ng-container>\n            </ng-container>\n\n            <!-- TODO: See if we can remove the error state from here, since it is controlled by the formControl -->\n            <ng-container *ngSwitchDefault>\n                <ng-container *ngIf=\"config.error || option.error\">\n                    <input type=\"radio\" value=\"{{option.value || option.text}}\"\n                        [id]=\"config.id + index\" size=\"large\" class=\"ng-invalid\"\n                        [formControlName]=\"config.id ?? 'formControl'\"\n                        [attr.disabled]='getDisabled(index)'>\n                </ng-container>\n                <ng-container *ngIf=\"!config.error && !option.error\">\n                    <input type=\"radio\" value=\"{{option.value || option.text}}\"\n                        [id]=\"config.id + index\" size=\"large\"\n                        [formControlName]=\"config.id ?? 'formControl'\"\n                        [attr.disabled]='getDisabled(index)'>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n\n        <label for=\"{{config.id}}\">{{option.text | translate}}</label>\n    </div>\n</form>\n" }]
        }], propDecorators: { config: [{
                type: Input
            }], id: [{
                type: Input
            }], formGroup: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,