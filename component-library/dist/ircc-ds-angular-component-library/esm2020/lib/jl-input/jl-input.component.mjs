import { Component, forwardRef, Input, } from '@angular/core';
import { FormControl, FormGroup, NG_VALUE_ACCESSOR } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "@ngx-translate/core";
export var InputTypes;
(function (InputTypes) {
    InputTypes["text"] = "text";
    InputTypes["password"] = "password";
})(InputTypes || (InputTypes = {}));
export class JLInputComponent {
    constructor() {
        this.formGroupEmpty = new FormGroup({});
        //DON'T include default values of '' unless it REALLY makes sense to do so. Instead, make them optional
        this.config = {
            id: '',
            formGroup: new FormGroup({})
        };
        this.id = '';
        this.formGroup = this.formGroupEmpty;
        this.disabled = false;
        this.focusState = false;
        this.showPassword = false;
    }
    ngOnInit() {
        if (this.id !== '') {
            this.config.id = this.id;
        }
        if (this.formGroup !== this.formGroupEmpty) {
            this.config.formGroup = this.formGroup;
        }
        this.config.formGroup.addControl(this.config.id, new FormControl('', this.config.validators));
    }
    focusInput(focusValue) {
        this.focusState = !focusValue;
    }
    /**
     * Toggle the password field
     */
    hideShow() {
        this.showPassword = !this.showPassword;
        this.config.type === InputTypes.password ? (this.config.type = InputTypes.text) : (this.config.type = InputTypes.password);
    }
    clearvalue() {
        this.config.value = ``;
    }
    writeValue(value) {
        this.config.value = value;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
JLInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: JLInputComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
JLInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.3", type: JLInputComponent, selector: "jl-pr-sclp-input", inputs: { config: "config", id: "id", formGroup: "formGroup" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => JLInputComponent),
            multi: true
        }
    ], ngImport: i0, template: "<!-- TODO: Fix how large is handled here to work with DS rather than against it -->\n<div>\n  <form [formGroup]=\"config.formGroup\">\n    <p *ngIf=\"config.type === 'password' || showPassword\">TODO: This element does not actually have correct aria text on\n      it!</p>\n    <div class=\"input-container\" [ngClass]=\"{ large: config.large, error: config.error }\">\n      <div class=\"input-text\">\n        <label for=\"{{ (config.value || '') }}\">{{ (config.label || '') | translate }}</label>\n        <p *ngIf=\"config.hintText\" class=\"hint-text\">{{ config.hintText | translate }}</p>\n        <div class=\"input-content-area\" [ngClass]=\"focusState === true ? 'focus' : ''\">\n          <!-- ngModel doesn't mind undefined values, apparently\n        TODO: Should probably change the (keyup) to (onblur) -->\n          <input autocomplete=\"{{ config.autocomplete }}\" placeholder=\"{{ (config.placeholder || '') | translate }}\"\n            tabindex=\"0\" [ngClass]=\"(showPassword || config.type === 'password') ? 'password' : 'input'\"\n            [type]=\"config.type\" [id]=\"config.id\" [formControlName]=\"config.id\" />\n        </div>\n        <button *ngIf=\"config.type === 'password' || showPassword\" role=\"switch\" category=\"plain\"\n          class=\"transparentButton\" (click)=\"hideShow()\" [disabled]=\"disabled\">\n          <div *ngIf=\"showPassword\"><i class=\"fa-solid fa-eye-slash\"></i></div>\n          <div *ngIf=\"!showPassword\"><i class=\"fa-solid fa-eye\"></i></div>\n          <!-- <i class=\"passwordIcon fa-solid\" aria-pressed=\"getShowHideText('check')\"\n            [ngClass]=\"showPassword ? 'fa-eye-slash' : 'fa-eye'\"></i> -->\n        </button>\n      </div>\n    </div>\n  </form>\n</div>", dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "pipe", type: i3.TranslatePipe, name: "translate" }], preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: JLInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'jl-pr-sclp-input', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => JLInputComponent),
                            multi: true
                        }
                    ], template: "<!-- TODO: Fix how large is handled here to work with DS rather than against it -->\n<div>\n  <form [formGroup]=\"config.formGroup\">\n    <p *ngIf=\"config.type === 'password' || showPassword\">TODO: This element does not actually have correct aria text on\n      it!</p>\n    <div class=\"input-container\" [ngClass]=\"{ large: config.large, error: config.error }\">\n      <div class=\"input-text\">\n        <label for=\"{{ (config.value || '') }}\">{{ (config.label || '') | translate }}</label>\n        <p *ngIf=\"config.hintText\" class=\"hint-text\">{{ config.hintText | translate }}</p>\n        <div class=\"input-content-area\" [ngClass]=\"focusState === true ? 'focus' : ''\">\n          <!-- ngModel doesn't mind undefined values, apparently\n        TODO: Should probably change the (keyup) to (onblur) -->\n          <input autocomplete=\"{{ config.autocomplete }}\" placeholder=\"{{ (config.placeholder || '') | translate }}\"\n            tabindex=\"0\" [ngClass]=\"(showPassword || config.type === 'password') ? 'password' : 'input'\"\n            [type]=\"config.type\" [id]=\"config.id\" [formControlName]=\"config.id\" />\n        </div>\n        <button *ngIf=\"config.type === 'password' || showPassword\" role=\"switch\" category=\"plain\"\n          class=\"transparentButton\" (click)=\"hideShow()\" [disabled]=\"disabled\">\n          <div *ngIf=\"showPassword\"><i class=\"fa-solid fa-eye-slash\"></i></div>\n          <div *ngIf=\"!showPassword\"><i class=\"fa-solid fa-eye\"></i></div>\n          <!-- <i class=\"passwordIcon fa-solid\" aria-pressed=\"getShowHideText('check')\"\n            [ngClass]=\"showPassword ? 'fa-eye-slash' : 'fa-eye'\"></i> -->\n        </button>\n      </div>\n    </div>\n  </form>\n</div>" }]
        }], propDecorators: { config: [{
                type: Input
            }], id: [{
                type: Input
            }], formGroup: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,